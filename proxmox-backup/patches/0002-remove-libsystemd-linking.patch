From 1c97466140c182c31499283c7df4e4b0be02653d Mon Sep 17 00:00:00 2001
From: Vladimir Ermakov <vooon341@gmail.com>
Date: Thu, 24 Jul 2025 12:33:00 +0200
Subject: [PATCH 2/3] remove libsystemd linking

Copy original proxmox-systemd crate, but left only escape.rs needed for
client and pxar.

Signed-off-by: Vladimir Ermakov <vooon341@gmail.com>
---
 Cargo.toml                           |   6 ++
 pbs-datastore/Cargo.toml             |   3 +-
 pbs-datastore/src/backup_info.rs     |   3 +-
 proxmox-backup-client/Cargo.toml     |   3 +-
 proxmox-backup-client/src/mount.rs   |   2 +
 proxmox-systemd-escape/Cargo.toml    |  13 +++
 proxmox-systemd-escape/src/escape.rs | 125 +++++++++++++++++++++++++++
 proxmox-systemd-escape/src/lib.rs    |   4 +
 8 files changed, 156 insertions(+), 3 deletions(-)
 create mode 100644 proxmox-systemd-escape/Cargo.toml
 create mode 100644 proxmox-systemd-escape/src/escape.rs
 create mode 100644 proxmox-systemd-escape/src/lib.rs

diff --git a/Cargo.toml b/Cargo.toml
index 045b28d1..e856e9d7 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -45,6 +45,8 @@ members = [
     #"proxmox-restore-daemon",
 
     "pxar-bin",
+
+    "proxmox-systemd-escape",
 ]
 
 [lib]
@@ -112,6 +114,8 @@ pbs-pxar-fuse = { path = "pbs-pxar-fuse" }
 pbs-tape = { path = "pbs-tape" }
 pbs-tools = { path = "pbs-tools" }
 
+proxmox-systemd-escape = { path = "proxmox-systemd-escape" }
+
 # regular crates
 anyhow = "1.0"
 async-trait = "0.1.56"
@@ -260,6 +264,8 @@ pbs-tools.workspace = true
 proxmox-rrd.workspace = true
 proxmox-rrd-api-types.workspace = true
 
+proxmox-systemd-escape.workspace = true
+
 # Local path overrides
 # NOTE: You must run `cargo update` after changing this for it to take effect!
 [patch.crates-io]
diff --git a/pbs-datastore/Cargo.toml b/pbs-datastore/Cargo.toml
index 8ce930a9..715e57fc 100644
--- a/pbs-datastore/Cargo.toml
+++ b/pbs-datastore/Cargo.toml
@@ -42,7 +42,8 @@ proxmox-s3-client = { workspace = true, features = [ "impl" ] }
 proxmox-schema = { workspace = true, features = [ "api-macro" ] }
 proxmox-serde = { workspace = true, features = [ "serde_json" ] }
 proxmox-sys.workspace = true
-proxmox-systemd.workspace = true
+#proxmox-systemd.workspace = true
+proxmox-systemd-escape.workspace = true
 proxmox-time.workspace = true
 proxmox-uuid.workspace = true
 proxmox-worker-task.workspace = true
diff --git a/pbs-datastore/src/backup_info.rs b/pbs-datastore/src/backup_info.rs
index 4b10b643..836b81d0 100644
--- a/pbs-datastore/src/backup_info.rs
+++ b/pbs-datastore/src/backup_info.rs
@@ -11,7 +11,8 @@ use const_format::concatcp;
 
 use proxmox_s3_client::S3PathPrefix;
 use proxmox_sys::fs::{lock_dir_noblock, lock_dir_noblock_shared, replace_file, CreateOptions};
-use proxmox_systemd::escape_unit;
+// use proxmox_systemd::escape_unit;
+use proxmox_systemd_escape::escape_unit;
 
 use pbs_api_types::{
     Authid, BackupGroupDeleteStats, BackupNamespace, BackupType, GroupFilter, VerifyState,
diff --git a/proxmox-backup-client/Cargo.toml b/proxmox-backup-client/Cargo.toml
index 5f0140e7..30e53771 100644
--- a/proxmox-backup-client/Cargo.toml
+++ b/proxmox-backup-client/Cargo.toml
@@ -31,7 +31,8 @@ proxmox-router = { workspace = true, features = [ "cli" ] }
 proxmox-schema = { workspace = true, features = [ "api-macro" ] }
 proxmox-sortable-macro.workspace = true
 proxmox-sys.workspace = true
-proxmox-systemd.workspace = true
+#proxmox-systemd.workspace = true
+proxmox-systemd-escape.workspace = true
 proxmox-time.workspace = true
 
 pbs-api-types.workspace = true
diff --git a/proxmox-backup-client/src/mount.rs b/proxmox-backup-client/src/mount.rs
index da18da1c..b1fbfc2d 100644
--- a/proxmox-backup-client/src/mount.rs
+++ b/proxmox-backup-client/src/mount.rs
@@ -33,6 +33,8 @@ use crate::{
     extract_repository_from_value, optional_ns_param, record_repository, REPO_URL_SCHEMA,
 };
 
+use proxmox_systemd_escape as proxmox_systemd;
+
 #[sortable]
 const API_METHOD_MOUNT: ApiMethod = ApiMethod::new(
     &ApiHandler::Sync(&mount),
diff --git a/proxmox-systemd-escape/Cargo.toml b/proxmox-systemd-escape/Cargo.toml
new file mode 100644
index 00000000..53463c84
--- /dev/null
+++ b/proxmox-systemd-escape/Cargo.toml
@@ -0,0 +1,13 @@
+[package]
+name = "proxmox-systemd-escape"
+description = """
+Utilities for dealing with systemd unit files and communicating with systemd.
+
+Only escape functionality!
+"""
+version = "0.1.0"
+
+authors.workspace = true
+edition.workspace = true
+
+[dependencies]
diff --git a/proxmox-systemd-escape/src/escape.rs b/proxmox-systemd-escape/src/escape.rs
new file mode 100644
index 00000000..f73beed3
--- /dev/null
+++ b/proxmox-systemd-escape/src/escape.rs
@@ -0,0 +1,125 @@
+use std::error::Error as StdError;
+use std::ffi::OsString;
+use std::fmt;
+use std::os::unix::ffi::OsStringExt;
+use std::path::PathBuf;
+
+/// Escape strings for usage in systemd unit names
+pub fn escape_unit<P: AsRef<[u8]>>(unit: P, is_path: bool) -> String {
+    escape_unit_bytes(unit.as_ref(), is_path)
+}
+
+fn escape_unit_bytes(mut unit: &[u8], is_path: bool) -> String {
+    if is_path {
+        while !unit.is_empty() && unit[0] == b'/' {
+            unit = &unit[1..];
+        }
+
+        if unit.is_empty() {
+            return String::from("-");
+        }
+    }
+
+    let mut escaped = String::new();
+
+    for (i, c) in unit.iter().enumerate() {
+        if *c == b'/' {
+            escaped.push('-');
+            continue;
+        }
+        if (i == 0 && *c == b'.')
+            || !(*c == b'_'
+                || *c == b'.'
+                || (*c >= b'0' && *c <= b'9')
+                || (*c >= b'A' && *c <= b'Z')
+                || (*c >= b'a' && *c <= b'z'))
+        {
+            use std::fmt::Write as _;
+            let _ = write!(escaped, "\\x{:02x}", c);
+        } else {
+            escaped.push(*c as char);
+        }
+    }
+    escaped
+}
+
+#[derive(Debug)]
+pub enum UnescapeError {
+    Msg(&'static str),
+    Utf8Error(std::string::FromUtf8Error),
+}
+
+impl StdError for UnescapeError {
+    fn source(&self) -> Option<&(dyn StdError + 'static)> {
+        match self {
+            Self::Utf8Error(e) => Some(e),
+            _ => None,
+        }
+    }
+}
+
+impl fmt::Display for UnescapeError {
+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
+        match self {
+            Self::Msg(err) => f.write_str(err),
+            Self::Utf8Error(err) => fmt::Display::fmt(err, f),
+        }
+    }
+}
+
+/// Unescape strings used in systemd unit names
+pub fn unescape_unit(text: &str) -> Result<String, UnescapeError> {
+    String::from_utf8(unescape_unit_do(text)?).map_err(UnescapeError::Utf8Error)
+}
+
+/// Unescape strings used in systemd unit names
+pub fn unescape_unit_path(text: &str) -> Result<PathBuf, UnescapeError> {
+    Ok(OsString::from_vec(unescape_unit_do(text)?).into())
+}
+
+/// Unescape strings used in systemd unit names
+fn unescape_unit_do(text: &str) -> Result<Vec<u8>, UnescapeError> {
+    let mut i = text.as_bytes();
+
+    let mut data: Vec<u8> = Vec::new();
+
+    loop {
+        if i.is_empty() {
+            break;
+        }
+        let next = i[0];
+        if next == b'\\' {
+            if i.len() < 4 {
+                return Err(UnescapeError::Msg("short input"));
+            }
+            if i[1] != b'x' {
+                return Err(UnescapeError::Msg("unknown escape sequence"));
+            }
+            let h1 = parse_hex_digit(i[2])?;
+            let h0 = parse_hex_digit(i[3])?;
+            data.push(h1 << 4 | h0);
+            i = &i[4..]
+        } else if next == b'-' {
+            data.push(b'/');
+            i = &i[1..]
+        } else {
+            data.push(next);
+            i = &i[1..]
+        }
+    }
+
+    Ok(data)
+}
+
+fn parse_hex_digit(d: u8) -> Result<u8, UnescapeError> {
+    if d.is_ascii_digit() {
+        return Ok(d - b'0');
+    }
+    if (b'A'..=b'F').contains(&d) {
+        return Ok(d - b'A' + 10);
+    }
+    if (b'a'..=b'f').contains(&d) {
+        return Ok(d - b'a' + 10);
+    }
+    Err(UnescapeError::Msg("invalid hex digit"))
+}
diff --git a/proxmox-systemd-escape/src/lib.rs b/proxmox-systemd-escape/src/lib.rs
new file mode 100644
index 00000000..301f4c5d
--- /dev/null
+++ b/proxmox-systemd-escape/src/lib.rs
@@ -0,0 +1,4 @@
+//! Systemd communication.
+
+mod escape;
+pub use escape::{escape_unit, unescape_unit, unescape_unit_path, UnescapeError};
-- 
2.51.0

